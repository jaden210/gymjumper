@import '~@angular/material/theming';
// Plus imports for other components in your app.
$my-blue: (
  50: #E1EAF1,
  100: #B4CADC,
  200: #82A6C5,
  300: #5082AD,
  400: #2B689C,
  500: #054D8A,
  600: #044682,
  700: #043D77,
  800: #03346D,
  900: #01255A,
  A100: #8BAFFF,
  A200: #588CFF,
  A400: #2569FF,
  A700: #0C57FF,
  contrast: (
    50: white,
    100: white,
    200: white,
    300: white,
    400: white,
    500: white,
    600: white,
    700: white,
    800: white,
    900: white,
    A100: white,
    A200: white,
    A400: white,
    A700: white,
  )
);

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat-core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$candy-app-primary: mat-palette($my-blue, 500);
$candy-app-accent:  mat-palette($mat-orange, A400);

// The warn palette is optional (defaults to red).
$candy-app-warn:    mat-palette($mat-grey, 100);

// Create the theme object (a Sass map containing all of the palettes).
$candy-app-theme: mat-light-theme($candy-app-primary, $candy-app-accent, $candy-app-warn);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include angular-material-theme($candy-app-theme);